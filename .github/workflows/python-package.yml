name: Python Package CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Add the project root to PYTHONPATH to ensure modules can be imported
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest --cov=./ --cov-report=xml -m "not slow and not integration"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build Docker image
      run: |
        # Build and tag the image with a fixed tag
        docker build -t neural-noise-seg:latest .
        echo "Built image: neural-noise-seg:latest"
        # List the images to confirm
        docker images
    
    - name: Test Docker image
      run: |
        # Check if model file exists before running test
        if [ -f "models/noise_unet_model.pth" ]; then
          echo "Model file exists, proceeding with test"
        else
          echo "WARNING: Model file not found. Testing module import only."
        fi
        
        # Test the module import (doesn't require model weights)
        docker run --rm neural-noise-seg:latest python -c "
        try:
            from models.noise_unet import NoiseAwareUNet
            model = NoiseAwareUNet(3, 1)
            print('Model import and instantiation successful')
        except Exception as e:
            print(f'Error: {e}')
            exit(1)
        "
        
        echo "Docker test completed successfully!"
